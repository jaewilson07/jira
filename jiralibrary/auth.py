# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/auth.ipynb.

# %% auto 0
__all__ = ['JiraAuth', 'JiraAuthPat']

# %% ../nbs/auth.ipynb 3
import urllib.parse as parse
from dataclasses import dataclass, field
import base64
import httpx

import jiralibrary.client as gd

# %% ../nbs/auth.ipynb 4
@dataclass
class _JiraAuth_Required:
    instance: str  # 'your-domain.atlassian.net'


@dataclass
class _JiraAuth_Optional:
    base_url: str = None

# %% ../nbs/auth.ipynb 5
@dataclass
class JiraAuth(_JiraAuth_Optional, _JiraAuth_Required):
    
    pass

# %% ../nbs/auth.ipynb 7
@dataclass
class _JiraAuthPat_Required:
    email: str
    pat: str = field(repr=False)

# %% ../nbs/auth.ipynb 8
@dataclass
class JiraAuthPat(_JiraAuth_Optional, _JiraAuthPat_Required, _JiraAuth_Required):
    def __post_init__(self):
        if not self.instance.startswith("https://"):
            instance = f"https://{self.instance}"

        self.instance = parse.urlparse(instance).netloc
        self.base_url = instance
        
    def generate_auth_header(self):
        auth_str = base64.b64encode(f"{self.email}:{self.pat}".encode("ascii")).decode(
            "ascii"
        )
        return {"Authorization": f"Basic {auth_str}"}

    async def who_am_i(
        self, session: httpx.AsyncClient = None, debug_api: bool = False
    ):
        url = f"{self.base_url}/rest/api/2/myself"

        response = await gd.get_data(
            method="GET",
            url=url,
            auth=self,
            debug_api=debug_api,
            session=session,
        )
        return response
